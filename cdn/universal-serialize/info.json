{
    "_id": "universal-serialize",
    "_rev": "4-76d7fde42e121dd61fb6ffbf3afb3ae2",
    "name": "universal-serialize",
    "dist-tags": {
        "latest": "1.0.8"
    },
    "versions": {
        "1.0.8": {
            "name": "universal-serialize",
            "version": "1.0.8",
            "description": "Javascript module template.",
            "main": "index.js",
            "scripts": {
                "setup": "npm install && npm run flow-typed",
                "lint": "eslint src/ test/ *.js --ext .js,.jsx",
                "flow-typed": "rm -rf ./flow-typed && flow-typed install && flow-typed install mocha@4",
                "flow": "flow",
                "karma": "cross-env NODE_ENV=test babel-node --plugins=transform-es2015-modules-commonjs ./node_modules/.bin/karma start",
                "babel": "babel src/ --out-dir dist/module",
                "webpack": "babel-node --plugins=transform-es2015-modules-commonjs ./node_modules/.bin/webpack --progress",
                "test": "npm run lint && npm run flow-typed && npm run flow && npm run karma",
                "build": "npm run test && npm run babel && npm run webpack",
                "release": "./publish.sh",
                "release:patch": "./publish.sh patch",
                "release:minor": "./publish.sh minor",
                "release:major": "./publish.sh major",
                "clean": "rimraf dist coverage",
                "reinstall": "rimraf flow-typed && rimraf node_modules && npm install && flow-typed install",
                "debug": "cross-env NODE_ENV=debug"
            },
            "browserslist": [
                "IE >= 11",
                "chrome >= 27",
                "firefox >= 30",
                "safari >= 7",
                "opera >= 23"
            ],
            "repository": {
                "type": "git",
                "url": "git://github.com/krakenjs/universal-serialize.git"
            },
            "keywords": [
                "template"
            ],
            "licenses": [
                {
                    "type": "Apache 2.0",
                    "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
                }
            ],
            "devDependencies": {
                "flow-bin": "^0.85",
                "grumbler-scripts": "^3"
            },
            "gitHead": "c28c79ec5ba690658e25a1cca2161a7eede9937b",
            "bugs": {
                "url": "https://github.com/krakenjs/universal-serialize/issues"
            },
            "homepage": "https://github.com/krakenjs/universal-serialize#readme",
            "_id": "universal-serialize@1.0.8",
            "_npmVersion": "5.6.0",
            "_nodeVersion": "8.12.0",
            "_npmUser": {
                "name": "bluepnume",
                "email": "daniel@bluesuncorp.co.uk"
            },
            "dist": {
                "integrity": "sha512-AhC3D26asmMkxAadYjCUJh98AUV/Fpp9uStVz4OuigpaGqIwY+i95EWE392P+4ObOPFHw8TUk/GazyiSGDtxhA==",
                "shasum": "93470f043a9ed30094104824c02d21f607b61e6a",
                "tarball": "https://www.paypalobjects.com/js-sdk-release/universal-serialize/tarballs/1.0.8.tgz",
                "fileCount": 48,
                "unpackedSize": 95611,
                "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeqjaMCRA9TVsSAnZWagAAlYwP/2SgNWPiAnkzz+B4XoX6\nn4YnYJo6lMaGcIXXxGsgFDmqtSo57PHfWJTwX0TgUFPTWvl00j4HJrFyM2xg\nfzvqZFZZDldlCnxPKLLUAgCxdtgGFV3CDtbgbDlhqlEGzXBPqwjVNbMCTOT5\nBm88SJDqL3a2gpFs20Rz8qjQe/oSXi9sgQ8GYxZhPC5VlrIXRhH+4iz31xtF\nRfG7dUTsLq71uGSLM0eEcBngVeD1bQmKfLpJFAZjBmfglzvrBt7WPcxKOTs9\nLzaOT83P2Fvddv3J3YAxhWXimpr1QAjnhICMgr5O03qpqaRrWdF78ZFXp6vK\n7BsG9bXN6lmXg8H25/Dv6OOKhTD5UQ2gPMaFVEaZzl34fcXveAQOKu7YphM2\n1MJuB59toJUK/yyskmKh/KNZF+Ackdr52JavDsFM/35v9pazAewXLcqVpGy5\nqjkL1UdqFXhnrZ2P21ymXKvKRMwJ94FRSWi2eu4EHj4ggygydV0WeP/8f5go\nmKDD3OwdkSv3ONyKfsIKp06HJ/XcfmfbpTVPVIIFWoXDg4oV2sKNwq2qEAov\nJKqHIGE6UZrCGgM4+bhTZHzDOeisAuH3lqTkLhA5cTrHKSxGffodcq/MjT3C\nGl8nVScUOJHy4Rg/XhDKVENF5i9Kzo/Z8zjOssmNBcu5COcVgxDtc/kDf9xg\nx4L/\r\n=2Hmu\r\n-----END PGP SIGNATURE-----\r\n"
            },
            "maintainers": [
                {
                    "name": "bluepnume",
                    "email": "daniel@bluesuncorp.co.uk"
                }
            ],
            "directories": {},
            "_npmOperationalInternal": {
                "host": "s3://npm-registry-packages",
                "tmp": "tmp/universal-serialize_1.0.8_1588213387993_0.8856376781384425"
            },
            "_hasShrinkwrap": false
        }
    },
    "time": {
        "created": "2018-11-19T23:19:01.818Z",
        "1.0.4": "2018-11-19T23:19:01.958Z",
        "modified": "2020-04-30T02:23:11.473Z",
        "1.0.5": "2018-11-20T00:58:40.258Z",
        "1.0.6": "2018-11-20T02:46:35.023Z",
        "1.0.7": "2019-02-02T00:52:34.811Z",
        "1.0.8": "2020-04-30T02:23:08.128Z"
    },
    "maintainers": [
        {
            "name": "bluepnume",
            "email": "daniel@bluesuncorp.co.uk"
        }
    ],
    "description": "Javascript module template.",
    "homepage": "https://github.com/krakenjs/universal-serialize#readme",
    "keywords": [
        "template"
    ],
    "repository": {
        "type": "git",
        "url": "git://github.com/krakenjs/universal-serialize.git"
    },
    "bugs": {
        "url": "https://github.com/krakenjs/universal-serialize/issues"
    },
    "readme": "Universal Serialize\n-------------------\n\nUniversal serializer and deserializer, which supports many build-in javascript types, and any number of custom types you want to support\n\n## Simple serialization\n\n```javascript\nimport { serialize, deserialize } from 'universal-serialize';\n\n\n// Define a complex object\nconst originalObject = {\n  foo: 'bar',\n  date: new Date(),\n  error: new Error('world')\n};\n\n// Serialize the complex object\nconst jsonString = serialize();\n\n// Deserialize the object\nconst deserializedObject = deserialize(jsonString);\n\n// Make use of the deserialized data and objects\nconsole.log(\n  deserializedObject.foo,\n  deserializedObject.date.toUTCString(),\n  deserializedObject.error.stack\n);\n```\n\nBy default universal serialize will serialize:\n\n- Errors\n- Regexes\n- Dates\n- Arrays\n- Objects\n- Strings\n- Numbers\n- Booleans\n- Nulls\n\n## Custom serialization\n\n```javascript\nimport { serialize, deserialize, serializeType, TYPE } from 'universal-serialize';\n\n// Define a new serialization type\nconst SERIALIZED_FUNCTION = 'SERIALIZED_FUNCTION';\n\n// Define a complex object containing a function\nconst originalObject = {\n    sayHello: () => {\n        console.log('Hello world!');\n    };\n};\n\n// Serialize the object with a special handler to serialize function types\nconst jsonString = serialize(originalObject, {\n    [ TYPE.FUNCTION ]: (val) => {\n        // Serialize the function as a 'serialized function'\n        return serializeType(SERIALIZED_FUNCTION, val.toString());\n    }\n});\n\n// Deserialize any `SERIALIZED_FUNCTION` types from the serialized object\nconst deserializedObject = deserialize(jsonString, {\n    [ SERIALIZED_FUNCTION ]: (fnString) => {\n      return eval(fnString);\n    }\n});\n\n// Call the deserialized functionn\ndeserializedObject.sayHello();\n```\n\nQuick Start\n-----------\n\n#### Getting Started\n\n- Fork the module\n- Run setup: `npm install`\n- Start editing code in `./src` and writing tests in `./tests`\n- `npm run build`\n\n#### Building\n\n```bash\nnpm run build\n```\n\n#### Tests\n\n- Edit tests in `./test/tests`\n- Run the tests:\n\n  ```bash\n  npm run test\n  ```\n\n#### Testing with different/multiple browsers\n\n```bash\nnpm run karma -- --browser=PhantomJS\nnpm run karma -- --browser=Chrome\nnpm run karma -- --browser=Safari\nnpm run karma -- --browser=Firefox\nnpm run karma -- --browser=PhantomJS,Chrome,Safari,Firefox\n```\n\n#### Keeping the browser open after tests\n\n```bash\nnpm run karma -- --browser=Chrome --keep-open\n```\n\n#### Publishing\n\n##### Before you publish for the first time:\n\n- Delete the example code in `./src`, `./test/tests` and `./demo`\n- Edit the module name in `package.json`\n- Edit `README.md` and `CONTRIBUTING.md`\n\n##### Then:\n\n- Publish your code: `npm run release` to add a patch\n  - Or `npm run release:path`, `npm run release:minor`, `npm run release:major`",
    "readmeFilename": "README.md"
}