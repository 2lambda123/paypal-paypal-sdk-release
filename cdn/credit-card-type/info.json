{
    "_id": "credit-card-type",
    "_rev": "32-83e229a837d30f5cafb4f2d790ce3338",
    "name": "credit-card-type",
    "description": "A library for determining credit card type",
    "dist-tags": {
        "latest": "9.1.0"
    },
    "versions": {
        "9.1.0": {
            "name": "credit-card-type",
            "version": "9.1.0",
            "description": "A library for determining credit card type",
            "main": "dist/index.js",
            "types": "dist/index.d.ts",
            "scripts": {
                "lint": "eslint --ext js,ts .",
                "posttest": "npm run lint",
                "test": "jest",
                "prepublishOnly": "npm run build",
                "prebuild": "prettier --write .",
                "build": "tsc --declaration"
            },
            "repository": {
                "type": "git",
                "url": "git+ssh://git@github.com/braintree/credit-card-type.git"
            },
            "homepage": "https://github.com/braintree/credit-card-type",
            "author": "",
            "license": "MIT",
            "devDependencies": {
                "@types/jest": "^26.0.13",
                "eslint": "^7.8.1",
                "eslint-config-braintree": "^5.0.0-typescript-prep-rc.18",
                "jest": "^26.4.2",
                "prettier": "^2.1.1",
                "ts-jest": "^26.3.0",
                "typescript": "^3.9.7"
            },
            "jest": {
                "preset": "ts-jest",
                "testEnvironment": "node",
                "testPathIgnorePatterns": [
                    "<rootDir>/src/__tests__/helper.ts"
                ]
            },
            "gitHead": "9d057cb9279cca9fc37d1b833a0f4a433caa97a2",
            "bugs": {
                "url": "https://github.com/braintree/credit-card-type/issues"
            },
            "_id": "credit-card-type@9.1.0",
            "_nodeVersion": "12.14.0",
            "_npmVersion": "6.13.4",
            "dist": {
                "integrity": "sha512-CpNFuLxiPFxuZqhSKml3M+t0K/484pMAnfYWH14JoD7OZMnmC0Lmo+P7JX9SobqFpRoo7ifA18kOHdxJywYPEA==",
                "shasum": "54dd96c93b6579623e9c8656e6798fc2b93f5f05",
                "tarball": "https://registry.npmjs.org/credit-card-type/-/credit-card-type-9.1.0.tgz",
                "fileCount": 30,
                "unpackedSize": 42909,
                "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjzhPCRA9TVsSAnZWagAAAcAP/A5pIXUK6PgailaMpICK\n15Rsscgf1cnIK4ipmLrEkb/8QacXAuy0ilVcgoJGV1lmpTaE/bvPpWFLaUDf\nDUaw+bUQmZJsNmjsNZY+jUhlpnEyfTBeiJgW1F3+kx2kY8AphTg68X+n91Dn\nqYvXGETx7QldmxSRIaCrQUOoyJdtwC29KGYsYoGFd2i7YDp3Q6jjxBjivEzc\nEpIDmHjR0b4UlC28Ej8L5fERWxHUo+c1BRI4dLpdgPSYsbBnc83Sz5akvtvm\nifyQhQlDiWpzsoxAz+A/IS4UdjFhgajfzVkuoI61JTm6xlZTW467YuaB3XEo\ntMMmW1TT29oFHGUC2aQfpLGFjoEwpkA51MctTfa83+TnLY4bTHInBz9a2aC4\njLTcZel/DjgS1P2xBA6uQZ7kSeD/SDQXpmE1VnA9/Ulnik0IWwUcjJJMlNUP\na1rsGbIba1CEfHIuDQd87bcSANLISybp71Dpcn3Ab3En5nqpW+2i+Sq12UAO\njoRzWrM7xEpa4+gtPbueuf4DFvexlPE58pDkk3FFB5KBEFk5MTBCrnQGh5jt\nu6nOSz8CSRKM7qi4AjX14Rk+NEjQBLJfFNVW6rtqq2cAlPSQ47VdTa9nyLQZ\nMbEB8rSxEjV/kp8un+vjMx1nSzM0LrxeMaQCc3JUIGfxChV9LW3Dm3oiijRT\nEY+8\r\n=tqjj\r\n-----END PGP SIGNATURE-----\r\n"
            },
            "maintainers": [
                {
                    "name": "braintree",
                    "email": "team-sdk@getbraintree.com"
                }
            ],
            "_npmUser": {
                "name": "braintree",
                "email": "team-sdk@getbraintree.com"
            },
            "directories": {},
            "_npmOperationalInternal": {
                "host": "s3://npm-registry-packages",
                "tmp": "tmp/credit-card-type_9.1.0_1603221583353_0.03955376912399333"
            },
            "_hasShrinkwrap": false
        }
    },
    "readme": "# Credit Card Type [![Build Status](https://travis-ci.org/braintree/credit-card-type.svg)](https://travis-ci.org/braintree/credit-card-type) [![npm version](https://badge.fury.io/js/credit-card-type.svg)](http://badge.fury.io/js/credit-card-type) [![Bower](https://badge.fury.io/bo/credit-card-type.svg)](http://badge.fury.io/bo/credit-card-type)\n\nCredit Card Type provides a useful utility method for determining a credit card type from both fully qualified and partial numbers. This is not a validation library but rather a smaller component to help you build your own validation or UI library.\n\nThis library is designed for type-as-you-go detection (supports partial numbers) and is written in CommonJS so you can use it in Node, io.js, and the [browser](http://browserify.org).\n\n## Download\n\nTo install via npm:\n\n```bash\nnpm install credit-card-type\n```\n\n## Example\n\n```javascript\nvar creditCardType = require(\"credit-card-type\");\n\nvar visaCards = creditCardType(\"4111\");\nconsole.log(visaCards[0].type); // 'visa'\n\nvar ambiguousCards = creditCardType(\"6\");\nconsole.log(ambiguousCards.length); // 6\nconsole.log(ambiguousCards[0].niceType); // 'Discover'\nconsole.log(ambiguousCards[1].niceType); // 'UnionPay'\nconsole.log(ambiguousCards[2].niceType); // 'Maestro'\n```\n\n## API\n\n### `creditCardType(number: String)`\n\n`creditCardType` will return an array of objects, each with the following data:\n\n| Key        | Type     | Description                                                                                                                                                                                                                                                                                                                                                                  |\n| ---------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `niceType` | `String` | A pretty printed representation of the card brand.<br/>- `Visa`<br />- `Mastercard`<br />- `American Express`<br />- `Diners Club`<br />- `Discover`<br />- `JCB`<br />- `UnionPay`<br />- `Maestro`<br />- `Mir`<br />- `Elo`<br />- `Hiper`<br />- `Hipercard`                                                                                                             |\n| `type`     | `String` | A code-friendly presentation of the card brand (useful to class names in CSS). Please refer to Card Type \"Constants\" below for the list of possible values.<br/>- `visa`<br />- `mastercard`<br />- `american-express`<br />- `diners-club`<br />- `discover`<br />- `jcb`<br />- `unionpay`<br />- `maestro`<br />- `mir`<br /> - `elo`<br /> - `hiper`<br /> - `hipercard` |\n| `gaps`     | `Array`  | The expected indices of gaps in a string representation of the card number. For example, in a Visa card, `4111 1111 1111 1111`, there are expected spaces in the 4th, 8th, and 12th positions. This is useful in setting your own formatting rules.                                                                                                                          |\n| `lengths`  | `Array`  | The expected lengths of the card number as an array of strings (excluding spaces and `/` characters).                                                                                                                                                                                                                                                                        |\n| `code`     | `Object` | The information regarding the security code for the determined card. Learn more about the [code object](#code) below.                                                                                                                                                                                                                                                        |\n\nIf no card types are found, this returns an empty array.\n\n### `creditCardType.getTypeInfo(type: String)`\n\n`getTypeInfo` will return a singular object (with the same structure as `creditCardType`) corresponding with the specified `type`, or undefined if the specified `type` is invalid/unknown.\n\n### Card Type \"Constants\"\n\nNamed variables are provided for each of the supported card types:\n\n- `AMERICAN_EXPRESS`\n- `DINERS_CLUB`\n- `DISCOVER`\n- `ELO`\n- `HIPERCARD`\n- `HIPER`\n- `JCB`\n- `MAESTRO`\n- `MASTERCARD`\n- `MIR`\n- `UNIONPAY`\n- `VISA`\n\n#### `code`\n\nCard brands provide different nomenclature for their security codes as well as varying lengths.\n\n| Brand              | Name   | Size |\n| ------------------ | ------ | ---- |\n| `Visa`             | `CVV`  | 3    |\n| `Mastercard`       | `CVC`  | 3    |\n| `American Express` | `CID`  | 4    |\n| `Diners Club`      | `CVV`  | 3    |\n| `Discover`         | `CID`  | 3    |\n| `JCB`              | `CVV`  | 3    |\n| `UnionPay`         | `CVN`  | 3    |\n| `Maestro`          | `CVC`  | 3    |\n| `Mir`              | `CVP2` | 3    |\n| `Elo`              | `CVE`  | 3    |\n| `Hiper`            | `CVC`  | 3    |\n| `Hipercard`        | `CVC`  | 4    |\n\nA full response for a `Visa` card will look like this:\n\n```json\n{\n  \"niceType\": \"Visa\",\n  \"type\": \"visa\",\n  \"gaps\": [4, 8, 12],\n  \"lengths\": [16],\n  \"code\": { \"name\": \"CVV\", \"size\": 3 }\n}\n```\n\n### Advanced Usage\n\nCommonJS:\n\n```javascript\nvar creditCardType = require(\"credit-card-type\");\nvar getTypeInfo = require(\"credit-card-type\").getTypeInfo;\nvar CardType = require(\"credit-card-type\").types;\n```\n\nES6:\n\n```javascript\nimport creditCardType, {\n  getTypeInfo,\n  types as CardType,\n} from \"credit-card-type\";\n```\n\n#### Filtering\n\n```javascript\ncreditCardType(cardNumber).filter(function (card) {\n  return card.type === CardType.MASTERCARD || card.type === CardType.VISA;\n});\n```\n\n#### Pattern Detection\n\nEach card type has a `patterns` attribute that is an array of numbers and ranges of numbers (represented by an array of 2 values, a min and a max).\n\nIf the pattern is a number, the modules compares it against the card number. Partial matches for card numbers that are shorter than the pattern also match. Given the pattern `123`, then the card numbers `1`, `12`, `123`, `1234` will all match, but `2`, `13`, and `124` will not.\n\nIf the pattern is an array of numbers, then the card number is checked to be within the range of those numbers. Again, partial matches are accepted. Given the range `[100, 123]`, then the card numbers `1`, `10`, `100`, `12`, `120`,\n`123` will all match, but `2`, `13`, and `124` will not.\n\nFor detection, the module loops over each card type's `patterns` array, and if a match occurs, that card type is added to the array of results.\n\nIn the case where multiple matches are made, if the entirety of the pattern is matched, the card type with the stronger pattern is preferred. For instance, Visa cards match anything that starts with a 4, but there are\nsome Elo cards that begin with a 4. One example is `401178`. So for the card\nnumbers, `4`, `40`, `401`, `4011`, `40117`, the module will report that this\ncard is _either_ a Visa or an Elo card. Once the card number becomes `401178`,\nthe modules sees that an exact match for the ELO bin has been made, and the module reports\nthat the card can only be an Elo card.\n\n#### Adding Card Types\n\nYou can add additional card brands not supported by the module with `addCard`. Pass in the configuration object.\n\n```javascript\ncreditCardType.addCard({\n  niceType: \"NewCard\",\n  type: \"new-card\",\n  patterns: [2345, 2376],\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: \"CVV\",\n    size: 3,\n  },\n});\n```\n\nIf you add a card that already exists in the module, it will overwrite it.\n\n```javascript\ncreditCardType.addCard({\n  niceType: \"Visa with Custom Nice Type\",\n  type: creditCardType.types.VISA,\n  patterns: [41111, [44, 47]],\n  gaps: [4, 8, 12],\n  lengths: [13, 16, 19], // add support for old, deprecated 13 digit visas\n  code: {\n    name: \"CVV\",\n    size: 3,\n  },\n});\n```\n\nAdding new cards puts them at the bottom of the priority for testing. Priority is determined by an array. By default, the priority looks like:\n\n```javascript\n[\n  creditCardType.types.VISA,\n  creditCardType.types.MASTERCARD,\n  creditCardType.types.AMERICAN_EXPRESS,\n  creditCardType.types.DINERS_CLUB,\n  creditCardType.types.DISCOVER,\n  creditCardType.types.JCB,\n  creditCardType.types.UNIONPAY,\n  creditCardType.types.MAESTRO,\n  creditCardType.types.ELO,\n  creditCardType.types.MIR,\n  creditCardType.types.HIPER,\n  creditCardType.types.HIPERCARD,\n];\n```\n\nYou can adjust the order using `changeOrder`. The number you pass in as the second argument is where the card is inserted into the array. The closer to the beginning of the array, the higher priority it has.\n\n```javascript\ncreditCardType.changeOrder(\"my-new-card\", 0); // give custom card type the highest priority\ncreditCardType.changeOrder(\"my-new-card\", 3); // give it a priority at position 3 in the test order array\n```\n\nYou can also remove cards with `removeCard`.\n\n```javscript\ncreditCardType.removeCard(creditCardType.types.VISA);\n```\n\nIf you need to reset the modifications you have created, simply call `resetModifications`:\n\n```javascript\ncreditCardType.resetModifications();\n```\n\n#### Updating Card Types\n\nYou can update cards with `updateCard`. Pass in the card type and the configuration object. Any properties left off will inherit from the original card object.\n\n```javascript\ncreditCardType.updateCard(creditCardType.types.VISA, {\n  niceType: \"Fancy Visa\",\n  lengths: [11, 16],\n});\n\nvar visa = creditCardType.getTypeInfo(creditCardType.types.VISA);\n\n// overwritten properties\nvisa.niceType; // 'Fancy Visa'\nvisa.length; // [11, 16]\n\n// unchanged properties\nvisa.gaps; // [4, 8, 12]\nvisa.code.name; // 'CVV'\n```\n\nIf you need to reset the modifications you have created, simply call `resetModifications`:\n\n```javascript\ncreditCardType.resetModifications();\n```\n\n#### Pretty Card Numbers\n\n```javascript\nfunction prettyCardNumber(cardNumber, cardType) {\n  var card = getTypeInfo(cardType);\n\n  if (card) {\n    var offsets = [].concat(0, card.gaps, cardNumber.length);\n    var components = [];\n\n    for (var i = 0; offsets[i] < cardNumber.length; i++) {\n      var start = offsets[i];\n      var end = Math.min(offsets[i + 1], cardNumber.length);\n      components.push(cardNumber.substring(start, end));\n    }\n\n    return components.join(\" \");\n  }\n\n  return cardNumber;\n}\n\nprettyCardNumber(\"xxxxxxxxxx343\", CardType.AMERICAN_EXPRESS); // 'xxxx xxxxxx 343'\n```\n\n### Development\n\nWe use `nvm` for managing our node versions, but you do not have to. Replace any `nvm` references with the tool of your choice below.\n\n```bash\nnvm install\nnpm install\n```\n\nAll testing dependencies will be installed upon `npm install` and the test suite executed with `npm test`.\n",
    "maintainers": [
        {
            "name": "braintree",
            "email": "team-sdk@getbraintree.com"
        }
    ],
    "time": {
        "modified": "2020-10-20T19:19:47.845Z",
        "created": "2015-04-16T22:28:41.048Z",
        "0.0.1": "2015-04-16T22:28:41.048Z",
        "1.0.0": "2015-04-16T22:44:42.135Z",
        "2.0.0": "2015-05-08T16:53:27.451Z",
        "3.0.0": "2015-06-17T21:12:27.247Z",
        "4.0.0": "2015-06-18T20:20:34.383Z",
        "4.0.1": "2015-10-13T20:57:44.008Z",
        "4.0.2": "2016-04-28T17:40:15.073Z",
        "4.0.3": "2016-05-04T14:31:25.883Z",
        "4.1.0": "2016-07-02T00:16:44.099Z",
        "5.0.0": "2016-09-16T21:28:20.287Z",
        "5.0.1": "2017-02-06T21:30:29.045Z",
        "5.0.2": "2017-05-24T16:23:15.934Z",
        "5.0.3": "2017-06-23T15:31:13.568Z",
        "5.0.4": "2017-08-17T21:13:48.196Z",
        "6.0.0": "2017-10-18T15:42:59.717Z",
        "6.1.0": "2017-11-13T14:51:10.173Z",
        "6.1.1": "2018-01-26T20:12:29.730Z",
        "6.2.0": "2018-02-07T04:22:44.413Z",
        "6.3.0": "2018-04-17T15:48:30.200Z",
        "7.0.0": "2018-05-11T19:05:18.432Z",
        "7.1.0": "2018-09-04T18:50:56.900Z",
        "8.0.0": "2018-10-09T15:18:59.432Z",
        "8.1.0": "2019-01-24T15:46:10.600Z",
        "8.2.0": "2019-04-03T01:35:18.176Z",
        "8.3.0": "2019-09-06T20:11:47.793Z",
        "9.0.0": "2020-07-10T20:36:03.078Z",
        "9.0.1": "2020-07-24T14:44:14.385Z",
        "9.1.0": "2020-10-20T19:19:43.529Z"
    },
    "license": "MIT",
    "readmeFilename": "README.md",
    "homepage": "https://github.com/braintree/credit-card-type",
    "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/braintree/credit-card-type.git"
    },
    "bugs": {
        "url": "https://github.com/braintree/credit-card-type/issues"
    },
    "users": {
        "nichoth": true,
        "pgabronis": true,
        "lmyrtil": true,
        "luhalvesbr": true
    }
}